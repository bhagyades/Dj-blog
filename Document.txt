1st create folder then create Virtualevn 
activate virtualevn
open project in Vs code
install linter 
install django "pip install Django==3.0.1"
create one app to django create project using command -django-admin startproject pydjblog
come in our main floder and go to pydjblog and cut that floder n paste in main folder 
and go to VS code and run program Command: python manage.py runserver 
create a strat up page/home page/index page we need to create a application 
create a application open ur traminal n run cammand"python manage.py startapp blog"
we r suppose to do any new app create to you go to the setting.py file and entry the ur name of app to installed app
now we r go to view file in ur app view is the action method file add the cod on there from django.http import HttpResponse
write there action method
"this is the overall code in view.py file
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def index(request):
    return HttpResponse('<marquee>Welcome to my blog</marquee>')

add the urls file in ur app file write the code 
"add below code in newly created urls.py file"

from django.urls import path
from . import views

urlpatterns = [
    path('',views.index)

]
go to the project app n go to the urls.py n add the apps url
code: 
"""pydjblog URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

import blog

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
]

go to app folder and create one file tamplates
In blog app folder -> create templates folder -> add home.html file in templates folder
write html tags
Code in your home.html will look like -
<html>
  <title>Py Dj Blog</title>
  <head> </head>
  <body>
    <div>
      <h1><marquee>Welcome to Py Dj Blog!!!!</marquee></h1>
    </div>
  </body>
</html>
Now render home.html from views.py file
So code in your blog app-> views.py file will be as follows -
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.


def index(request):
    return render(request, 'home.html')

write jeson as a data
all_posts = [
    {
        'author':'James',
        'title':'How Learn Django Quickly',
        'content':'In this post i will teach you How Learn Django Quickly',
        'date_posted':'Dec 24,2019 10:00 AM'

    },
    {
        'author':'Tom',
        'title':'Python JSON',
        'content':'How to deal with Python JSON',
        'date_posted':'Dec 23,2019 1:00 PM'

    },
    {
        'author':'Pintu',
        'title':'How django Static folder works',
        'content':'In this post i am going to explaine you how django static folder works',
        'date_posted':'Dec 23,2019 1:00 PM'

    },
    {
        'author':'Chintu',
        'title':'Learn CSS',
        'content':'In this post i am going to explaine you how django static folder works',
        'date_posted':'Feb 19,2020 3:39 PM'

    }
]
After adding posts json data your blog app-> views.py file code will be -

def index(request):
    data = {
        'posts': all_posts
    }
    return render(request, 'home.html', data)

Now code in your home.html will be as follows -

<html>
  <title>Py Dj Blog</title>
  <head> </head>
  <body>
    {% block content%}
    <div>
      <h1><marquee>Welcome to Py Dj Blog!!!!</marquee></h1>
      <br />
      {% for p in posts %}
      <div>
        Post Author - {{p.author}} <br />
        Post Title - {{p.title}} <br />
        Post Content - {{p.content}} <br />
        Date Posted - {{p.date_posted}}
      </div>
      {% endfor %}
    </div>
    {% endblock %}
  </body>
</html>

Let's add bootstrap theme into project as follows -https://bootswatch.com/

Bootstrap integrated home.html code will be as follwos -
<html>
  <title>Py Dj Blog</title>
  <head>
    <link
      rel="stylesheet"
      href="https://bootswatch.com/4/united/bootstrap.min.css"
    />
  </head>
  <body>
    {% block content%}
    <div>
      <h1><marquee>Welcome to Py Dj Blog!!!!</marquee></h1>
      <br />
      {% for p in posts %}
      <div
        style="background-color: orange; border-radius: 10px; padding: 10px;"
      >
        Post Author - {{p.author}} <br />
        Post Title - {{p.title}} <br />
        Post Content - {{p.content}} <br />
        Date Posted - {{p.date_posted}}
      </div>
      <br />
      {% endfor %}
    </div>
    {% endblock %}
  </body>
</html>

now we create a web page
(In your project folder -> i.e. root folder -> create folder -> templates)
In newly added templates folder which is in root -> add -> base.html file
In root folder add static folder -> In static folder add css folder -> in css folder add bootstrap.min.css file
go to settings.py file of site
In settings.py file below STATIC_URL put below code -
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
put this custom.css file in static ->css-> folder
Go to settings.py file -> line no 58 -> 'DIRS' = []
and replace that with below code -
'DIRS': [
            os.path.join(BASE_DIR,'templates'),
        ],

Go to blog app -> models.py ->
from django.db import models
from django.utils import timezone
# To set author i.e. user from User Table we need to add below import
from django.contrib.auth.models import User


# Create your models here.
class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    date_posted = models.DateTimeField(default=timezone.now)
    # need author having relation with Users table in Django Database
    author = models.ForeignKey(User, on_delete=models.CASCADE)

run command python manage.py makemigrations
and next is python manage.py migrate
open db browser and drag drop db.browser
python manage.py createsuperuser run this command
create id password 
and fill the info for db browser
edit view file

from django.shortcuts import render
from django.http import HttpResponse
from . models import Post


# Create your views here.


def index(request):
    data = {
        'posts': Post.objects.all()
    }
    return render(request, 'home.html', data)

create a new app using command(python manage.py startapp users)
go to sites and setting.py and add app name
Go to users app -> views.py file 

And add below code in it -
from django.shortcuts import render
from django.contrib.auth.forms import UserCreationForm


# Create your views here.
def register(request):
    form = UserCreationForm()
    return render(request, 'register.html', {'form': form})
go to users app -> create folder templates in it -> in templates folder add register.html file

go to users app -> templates -> register.html  and add below code in it 


{% extends 'base.html'%} 

{% block content%}
<h1>Register</h1>

<div class="content-section">
  <form method="POST">
    {% csrf_token %}
    <fieldset class="form-group">
      <legend class="border-bottom mb-4">Join Now</legend>
      {{form}}
    </fieldset>
    <div class="form-group">
      <button class="btn btn-primary" type="submit">Sign Up</button>
    </div>
  </form>
  <div class="border-top pt-3">
    <small class="text-muted">
      Already Have Account? <a class="ml-2" href="#">Sign In</a>
    </small>
  </div>
</div>

{% endblock content %}

Go to websites urls.py file 
Add below import in it
from users import views as user_views

So whole code in sites urls.py file will be -
"""pydjblog URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from users import views as user_views

import blog

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
    path('register/', user_views.register, name='register'),
]

go to register.html

Change {{ form }}
to 
{{ form.as_p}}

pip install django-crispy-forms
Now go to projects settings.py file

In INSTALLED_APPS list add below 'users', 

'crispy_forms',

Go to bottom of settings.py file

And Add -

CRISPY_TEMPLATE_PACK = 'bootstrap4'
Go to users app -> templates -> register.html 

And add below extends base.html -

{% load crispy_forms_tags %}

Which allows us to use crispy filter on any of our forms
And now we can change {{form.as_p}} to {{form | crispy}}

users app-> views.py -> code will be -
from django.shortcuts import render, redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages


# Create your views here.
def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            messages.success(request, f'Account Created Successfully \
                for user {username} !!!')
            return redirect('blog-home')
    else:
        form = UserCreationForm()

    return render(request, 'register.html', {'form': form})

blog app -> urls.py -> code will be -
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='blog-home')

]

projects ->  templates -> base.html -> code will be 
{% load static %}
<!DOCTYPE html>
<html>
  <head>
    <title>Py DJ Blog Home</title>
    <!-- All CSS References-->
    <link rel="stylesheet" type="text/css" href="{% static 'css/bootstrap.min.css'%}">
    <link rel="stylesheet" type="text/css" href="{% static 'css/custom.css'%}">
  </head>
  <body>
    <!--Header Start-->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Py DJ Blog</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
      
        <div class="collapse navbar-collapse" id="navbarColor01">
          <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
              <a class="nav-link"  href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">About</a>
            </li>
        </div>
      </nav>
    <!--Header Ends-->
    <br/>
    <br/>
    <!--Main Area Starts -->
    <div class="container">
        <div class="row">
            <!--Main Area Content Starts -->
            <div class="col-sm-8">
              {% if messages %}
  
                {% for message in messages %}
                    <div class="alert alert-{{message.tags}}">
                      {{message}}
                    </div>
                {% endfor %}

              {% endif %}
                {% block content%}

                {% endblock %}
            </div>
            <!--Main Area Content End -->

            <!--Right Nav Bar Starts -->
            <div class="col-sm-4">
                <div class="list-group">
                    <a href="#" class="list-group-item list-group-item-action active">
                      Latest Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action">
                      Python Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action disabled">
                      Django Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action disabled">
                      HTML5 Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action disabled">
                      CSS Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action disabled">
                      Bootstrap Posts
                    </a>
                  </div>
                  <br/>
                  <br/>
            </div>
             <!--Right Nav Bar Ends -->
        </div>
    </div>         
    <!--Main Area Ends -->
     <!--Footer Start-->
     <div class="footer">
        <p>Py Dj Blog CopyRight@2020</p>
    </div>
    <!--Footer Ends-->

  </body>
</html>

create a new file
users app -> add new file -> forms.py
Code in forms.py -

from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm


class UserRegistrationForm(UserCreationForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']


Go to users app -> views.py ->
Code in views.py file will be -

from django.shortcuts import render, redirect
#from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from .forms import UserRegistrationForm


# Create your views here.
def register(request):
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            form.save()  # User will get stored into database
            username = form.cleaned_data.get('username')
            messages.success(request, f'Account Created Successfully \
                for user {username} !!!')
            return redirect('blog-home')
    else:
        form = UserRegistrationForm()

    return render(request, 'register.html', {'form': form})

Go to sites urls.py file 
All code looks like in sites urls.py file as follows -
"""pydjblog URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from users import views as user_views
from django.contrib.auth import views as auth_views

import blog

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
    path('register/', user_views.register, name='register'),
    path('login/', auth_views.LoginView.as_view(), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
]

In sites urls.py modify your last two path entries as follows -
 path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),
 path('logout/', auth_views.LogoutView.as_view(template_name='logout.html'), name='logout'),

Now go to users app-> templates -> add login.html file
{% extends "base.html" %} 
{% load crispy_forms_tags %} 
{% block content %}
<div class="content-section">
  <form method="POST">
    {% csrf_token %}
    <fieldset class="form-group">
      <legend class="border-bottom mb-4">Log In</legend>
      {{ form|crispy }}
    </fieldset>
    <div class="form-group">
      <button class="btn btn-outline-info" type="submit">Login</button>
    </div>
  </form>
  <div class="border-top pt-3">
    <small class="text-muted">
      Need An Account?
      <a class="ml-2" href="{% url 'register' %}">Sign Up Now</a>
    </small>
  </div>
</div>
{% endblock content %}

Code in register.html file -
{% extends 'base.html'%} 
{% load crispy_forms_tags %} 
{% block content%}

<div class="content-section">
  <form method="POST">
    {% csrf_token %}
    <fieldset class="form-group">
      <legend class="border-bottom mb-4">Join Now</legend>
      {{form | crispy}}
    </fieldset>
    <div class="form-group">
      <button class="btn btn-primary" type="submit">Sign Up</button>
    </div>
  </form>
  <div class="border-top pt-3">
    <small class="text-muted">
      Already Have Account? <a class="ml-2" href="{% url 'login' %}">Sign In</a>
    </small>
  </div>
  <br />
  <br />
</div>

{% endblock content %}

Now go to settins.py of site and add following line at the end of file -

LOGIN_REDIRECT_URL ='blog-home'

Also do one more change go to -> users ->views.py and after register redirect user to login page now 

so change return redirect('blog-home') to return redirect('login') 

Go to -users app -> templates -> Add new logout.html file 
In logout.html file Use following code -

{% extends "base.html" %}
{% block content %}
    <h2>You have been logged out</h2>
    <div class="border-top pt-3">
        <small class="text-muted">
            <a href="{% url 'login' %}">Log In Again</a>
        </small>
    </div>
{% endblock content %}

Now go to base.html file and add below code in it -
{% load static %}
<!DOCTYPE html>
<html>
  <head>
    <title>Py DJ Blog Home</title>
    <!-- All CSS References-->
    <link rel="stylesheet" type="text/css" href="{% static 'css/bootstrap.min.css'%}">
    <link rel="stylesheet" type="text/css" href="{% static 'css/custom.css'%}">
  </head>
  <body>
    <!--Header Start-->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <a class="navbar-brand" href="#">Py DJ Blog</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
      
        <div class="collapse navbar-collapse" id="navbarColor01">
          <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
              <a class="nav-link"  href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">About</a>
            </li>
            {% if user.is_authenticated %}
            <li class="nav-item">
              <a class="nav-link" href="#">Profile</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Create Post</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="{% url 'logout' %}">Logout</a>
            </li>
            <li>
              <label class="form-control">Welcome - {{ user.username }}</label>
            </li>
            {% else %}

            <li class="nav-item">
              <a class="nav-link" href="{% url 'login' %}">Login</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="{% url 'register' %}">Register</a>
            </li>
            {% endif %}
        </div>
      </nav>
    <!--Header Ends-->
    <br/>
    <br/>
    <!--Main Area Starts -->
    <div class="container">
        <div class="row">
            <!--Main Area Content Starts -->
            <div class="col-sm-8">
              {% if messages %}
  
                {% for message in messages %}
                    <div class="alert alert-{{message.tags}}">
                      {{message}}
                    </div>
                {% endfor %}

              {% endif %}
                {% block content%}

                {% endblock %}
            </div>
            <!--Main Area Content End -->

            <!--Right Nav Bar Starts -->
            <div class="col-sm-4">
                <div class="list-group">
                    <a href="#" class="list-group-item list-group-item-action active">
                      Latest Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action">
                      Python Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action disabled">
                      Django Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action disabled">
                      HTML5 Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action disabled">
                      CSS Posts
                    </a>
                    <a href="#" class="list-group-item list-group-item-action disabled">
                      Bootstrap Posts
                    </a>
                  </div>
                  <br/>
                  <br/>
            </div>
             <!--Right Nav Bar Ends -->
        </div>
    </div>         
    <!--Main Area Ends -->
     <!--Footer Start-->
     <div class="footer">
        <p>Py Dj Blog CopyRight@2020</p>
    </div>
    <!--Footer Ends-->

  </body>
</html>


-----------------------------------------------------------------------------
Date:31/7/2020

Post crud(create, read, update, delete) system:
how user can create there post 
vi
go to blog app -> view.py 

blog app -> views.py
Add below code in it -
from django.shortcuts import render
from django.http import HttpResponse
from . models import Post
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.views.generic import (
ListView,
DetailView,
CreateView,
UpdateView,
DeleteView
)


# Create your views here.


def index(request):
data = {
'posts': Post.objects.all()
}
return render(request, 'home.html', data)


class PostListView(ListView):
	model = Post
	template_name = 'home.html'
	context_object_name = 'posts'
	ordering = ['-date_posted']

class PostDetailView(DetailView):
	model = Post
	template_name = 'post_detail.html'



go to blog app-> urls.py

from django.urls import path
#from . import views
from .views import PostListView, PostDetailView

urlpatterns = [
	path('', PostListView.as_view(), name='blog-home'),
	path('post/<int:pk>/', PostDetailView.as_view(), name='post-detail'),

]

Now in blog -> templates -> add new html file -> post_detail.html
Add below code in post_detail.html
{% extends "base.html" %}
{% block content %}
  <article class="media content-section">
    <img class="rounded-circle article-img" src="{{ object.author.profile.image.url }}">
    <div class="media-body">
      <div class="article-metadata">
        <a class="mr-2" href="#">{{ object.author }}</a>
        <small class="text-muted">{{ object.date_posted|date:"F d, Y" }}</small>
        {% if object.author == user %}
          <div>
            <a class="btn btn-secondary btn-sm mt-1 mb-1" href="{% url 'post-update' object.id %}">Update</a>
            <a class="btn btn-danger btn-sm mt-1 mb-1" href="{% url 'post-delete' object.id %}">Delete</a>
          </div>
        {% endif %}
      </div>
      <h2 class="article-title">{{ object.title }}</h2>
      <p class="article-content">{{ object.content }}</p>
    </div>
  </article>
{% endblock content %}

blog app-> views.py
we have added createview refrance
in import section add -
from django.views.generic import (
ListView,
DetailView,
CreateView )

added new method 
class PostCreateView(CreateView):
model = Post
template_name = 'post_form.html'
fields = ['title', 'content']

Go to blog app -> templates folder -> add new html file in it with name - post_form.html
Now add below code into your newly added post_form.html

{% extends "base.html" %}
{% load crispy_forms_tags %}
{% block content %}
    <div class="content-section">
        <form method="POST">
            {% csrf_token %}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Blog Post</legend>
                {{ form|crispy }}
            </fieldset>
            <div class="form-group">
                <button class="btn btn-outline-info" type="submit">Post</button>
            </div>
        </form>
    </div>
{% endblock content %}

Go to blog app -> urls.py file
Add class PostCreateView in import
In your urlpatterns list add below line -
path('post/new/', PostCreateView.as_view(), name='post-create'),

Now go to blog app ->views.py file and add below code in PostCreateView method this method looks like as follows -
class PostCreateView(CreateView):
    model = Post
    template_name = 'post_form.html'
    fields = ['title', 'content']

    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)

Go to blog app->models.py file and add following method in it below _str_ method -

def get_absolute_url(self):
return reverse('post-detail', kwargs={'pk': self.pk})
Go to blog app -> models.py and add below import in that file
from django.urls import reverse

go to blog app-> views.py
After applying Login Mixin PostCreate Method in blog app ->viesw.py looks like as follows -
class PostCreateView(LoginRequiredMixin, CreateView):
    login_url = '/login/'
    redirect_field_name = 'login'
    model = Post
    template_name = 'post_form.html'
    fields = ['title', 'content']

    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)

Now to Update Post Details -
Go to blogs app -> views.py file -Add below import
UpdateView,
To Update Post add below method in blog app -> views.py below PostCreate method -

class PostUpdateView(LoginRequiredMixin,UpdateView):
    login_url = '/login/'
    redirect_field_name = 'login'
    
    model = Post
    template_name = 'post_form.html'
    fields = ['title', 'content']  

    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)  

Now go to blog -> urls.py file
Add import of PostUpdateView
And in urlpatterns list add below entry at the end
path('post/<int:pk>/update/', PostUpdateView.as_view(), name='post-update'),

In blog app -> views.py add below import
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
And our latest PostUpdateView method wil;l be as follows -
class PostUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    login_url = '/login/'
    redirect_field_name = 'login'

    model = Post
    template_name = 'post_form.html'
    fields = ['title', 'content']

    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)

    def test_func(self):
        post = self.get_object()
        if self.request.user == post.author:
            return True
        return False

Go to post_detail.html file find Update button code in it and replace it's href from # to
 href="{% url 'post-update' object.id %}"

Delete:-
Go to blog -> views.py
Add import of DeleteView
Now add below code at the end of bolg ->views.py file
class PostDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    login_url = '/login/'
    redirect_field_name = 'login'

    model = Post
    template_name = 'post_confirm_delete.html'
    success_url = '/'

    def test_func(self):
        post = self.get_object()
        if self.request.user == post.author:
            return True
        return False
Go to blog app->urls.py file and add import of PostDeleteView
then in urlspattern list add below entry at the end
path('post/<int:pk>/delete/', PostDeleteView.as_view(), name='post-delete'),

Go to blog app -> templates folder -> add new html file -> post_confirm_delete.html
Code in post_confirm_delete.html will be as follows -
{% extends "base.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST">
            {% csrf_token %}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Delete Post</legend>
                <h2>Are you sure you want to delete the post "{{ object.title }}"</h2>
            </fieldset>
            <div class="form-group">
                <button class="btn btn-outline-danger" type="submit">Yes, Delete</button>
                <a class="btn btn-outline-secondary" href="{% url 'post-detail' object.id %}">Cancel</a>
            </div>
        </form>
    </div>
{% endblock content %}

go to blog app ->templates ->post_detail.html
And Find href of Delete button and change it from href="#" to 
href="{% url 'post-delete' object.id %}"

About:
Go to blog app -> views.py
Add below code at the end of file
def about(request):
	return render(request,'about.html')

Go to blog app-> templates -> add new html file with name -> about.html
Add below code in about.html file
{% extends 'base.html'%} 

{% load static %} 

{% block content%}

<div class="card mb-3">
  <h3 class="card-header">About Me</h3>
  <div class="card-body">
    <h5 class="card-title">Mr. Tango Django</h5>
    <h6 class="card-subtitle text-muted">
      Python Django Consultant and Expert
    </h6>
  </div>
  <img
    style="height: 200px; width: 100%; display: block;"
    src="{% static '../media/default.jpg' %}"
    alt="Card image"
  />
  <div class="card-body">
    <p class="card-text">Helping Developers in their projects</p>
  </div>
  <ul class="list-group list-group-flush">
    <li class="list-group-item">Python</li>
    <li class="list-group-item">Django</li>
    <li class="list-group-item">Bootstrap</li>
  </ul>
</div>

{% endblock%}

Go to blog app ->urls.py file and add below path entry in urlpatterns list at the end
path('about/', views.about, name='blog-about'),
Go to base.html file -> find href of About it is href="#" and change it to
 href="{% url 'blog-about' %}"

To Do Pagination:-
blog app -> templates ->home.html
put below code


{% extends 'base.html'%} {% block content%}
<div>
  <h3><marquee>Welcome to Py Dj Blog!!!!</marquee></h3>
  <br />
  {% for p in posts %}
  <div class="card border-primary mb-3">
    <div class="card-header">
      <img
        class="rounded-circle article-img"
        style="width: 45px; height: 45px;"
        src="{{ p.author.profile.image.url }}"
      />
      <b
        ><a class="article-title" href="{% url 'post-detail' p.id %}"
          >{{ p.title }}</a
        ></b
      >
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-12">
          <h6 class="card-title">
            By - {{p.author}} On {{p.date_posted |date:"F d, Y"}}
          </h6>
        </div>
      </div>

      <p class="card-text">{{p.content}}</p>
    </div>
  </div>
  {% endfor %}
</div>

<div class="pagination">
  <span class="step-links">
    {% if page_obj.has_previous %}
    <a class="btn btn-outline-info mb-4" href="?page=1">&laquo; First</a>
    <a
      class="btn btn-outline-info mb-4"
      href="?page={{ page_obj.previous_page_number }}"
      >Previous</a
    >
    {% endif %}

    <span class="current">
      Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.
    </span>

    {% if page_obj.has_next %}
    <a
      class="btn btn-outline-info mb-4"
      href="?page={{ page_obj.next_page_number }}"
      >Next</a
    >
    <a
      class="btn btn-outline-info mb-4"
      href="?page={{ page_obj.paginator.num_pages }}"
      >Last &raquo;</a
    >
    {% endif %}
  </span>
</div>

{% endblock content %}

Forget Password:-
Go to sites urls.py file
 path('password-reset/',
         auth_views.PasswordResetView.as_view(
             template_name='password_reset.html'
         ),
         name='password_reset'),

Go to user app -> templates -> create new html file with name password_reset.html
put below html code in it
{% extends "base.html" %}
{% load crispy_forms_tags %}
{% block content %}
    <div class="content-section">
        <form method="POST">
            {% csrf_token %}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Reset Password</legend>
                {{ form|crispy }}
            </fieldset>
            <div class="form-group">
                <button class="btn btn-outline-info" type="submit">Request Password Reset</button>
            </div>
        </form>
    </div>
{% endblock content %}

Again go to sites ->urls.py and in urlspatterns add below entry
path('password-reset/done/',
auth_views.PasswordResetDoneView.as_view(
template_name='password_reset_done.html'
),
name='password_reset_done'),

Go to user app -> templates -> create new html file with name password_reset_done.html
put below html code in password_rest_done.html file
{% extends "base.html" %}
{% block content %}
    <div class="alert alert-info">
        An email has been sent with instructions to reset your password
    </div>
{% endblock content %}

Again go to sites ->urls.py and in urlspatterns add below entry
path('password-reset-confirm/<uidb64>/<token>/',
         auth_views.PasswordResetConfirmView.as_view(
             template_name='password_reset_confirm.html'
         ),
         name='password_reset_confirm'),

Go to user app -> templates -> create new html file with name password_reset_confirm.html
Add below html code in it
{% extends "base.html" %} {% load crispy_forms_tags %} {% block content %}
<div class="content-section">
  <form method="POST">
    {% csrf_token %}
    <fieldset class="form-group">
      <legend class="border-bottom mb-4">Reset Password</legend>
      {{ form|crispy }}
    </fieldset>
    <div class="form-group">
      <button class="btn btn-outline-info" type="submit">Reset Password</button>
    </div>
  </form>
</div>
{% endblock content %}

Again go to sites ->urls.py and in urlspatterns add below entry
path('password-reset-complete/',
         auth_views.PasswordResetCompleteView.as_view(
             template_name='password_reset_complete.html'
         ),
         name='password_reset_complete'),   

Go to user app -> templates -> create new html file with name password_reset_complete.html
Add below html code in it
{% extends "base.html" %} {% block content %}
<div class="alert alert-info">
  Your password has been set.
</div>
<a href="{% url 'login' %}">Sign In Here</a>
{% endblock content %}

Now go to sites setting.py file and add below email sending settings -at the end of file

# Email Settings -
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

Go to users app -> templates -> login.html in this file find code of login button and below this login button code add below code
<small class="text-muted ml-2">
                    <a href="{% url 'password_reset' %}">Forgot Password?</a>
                </small>